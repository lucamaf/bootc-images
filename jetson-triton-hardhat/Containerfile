# Builds a basic RHEL Bootc image for NVIDIA Tegra SOC with Nvidia CDI enabled

# The packages from NVIDIA's repo are only built for specific versions of RHEL, be sure to pin the exact tag
FROM registry.redhat.io/rhel9/rhel-bootc:9.4-1730828483

# Install NVIDIA jetpack components
# Mask nvpower.service (causes kernel panic)
# Remove upstream host1x kernel module (conflicts with nvidia provided one)

# Container image with nvidia jetson RPMs
COPY --from=quay.io/luisarizmendi/rhel-nvidia-jetson-rpms:9.4 /artifacts/ /tmp/artifact/

RUN dnf -y install /tmp/artifact/*.rpm && \
    dnf clean all && \
    systemctl mask nvfancontrol.service nvpmodel.service nvpower.service && \
    rm -r /tmp/artifact && \
    rm /usr/lib/modules/*/kernel/drivers/gpu/host1x/host1x.ko.xz

# Regenerate initrd (just in case)
RUN set -x; kver=$(cd /usr/lib/modules && echo *); dracut -vf /usr/lib/modules/$kver/initramfs.img $kver

# Install NVIDIA container toolkit
# netavark is required for podman network to work
RUN curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \
    sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo && \
    sudo dnf -y install \
      netavark \
      nvidia-container-toolkit && \
    sudo dnf clean all

# Create and enable a systemd service to generate the NVIDIA CDI YAML file
RUN cat <<EOF > /etc/systemd/system/nvidia-cdi.service
[Unit]
Description=Generate the nvidia cdi yaml file
Requires=multi-user.target
Requires=systemd-modules-load.service
After=multi-user.target
After=systemd-modules-load.service

[Service]
Type=oneshot
ExecStartPre=bash -c "echo 1 > /dev/nvgpu/igpu0/power"
ExecStart=nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
RUN systemctl enable nvidia-cdi

# Configure SSHD to allow GatewayPorts
# this allows for forwarding a port on the device under test to the test runner
# for prometheus to send metrics over remote write
RUN cat <<EOF > /etc/ssh/sshd_config.d/51-custom.conf
GatewayPorts clientspecified
EOF

# Modify bootc-generic-growpart service to remove virtualization condition
# so that the root partition is expanded to fill the entire disk
RUN sed -i '/ConditionVirtualization=vm/d' /usr/lib/systemd/system/bootc-generic-growpart.service
# Configure Podman to use netavark as the network backend
RUN sed -i 's/#network_backend = ""/network_backend = "netavark"/' /usr/share/containers/containers.conf
# Change Podman socket permissions to 0666 (UNSAFE!)
# allowing non-root users to run privileged containers
RUN sed -i 's/SocketMode=0660/SocketMode=0666/' /usr/lib/systemd/system/podman.socket
# Create a symlink for 'docker' to 'podman'
# to provide compatibility with docker-compose
RUN ln -sr /usr/bin/podman /usr/bin/docker
# Enable the Podman socket
RUN systemctl enable podman.socket

# Configure sudoers to allow wheel group members to run commands without password
RUN cat <<CFG > /etc/sudoers.d/wheel-nopasswd
%wheel ALL=(ALL) NOPASSWD: ALL
CFG

# Load the i2c-dev kernel module at boot
# for jetson_stats
RUN cat <<EOF > /etc/modules-load.d/i2c-dev.conf
i2c-dev
EOF

# Add kernel arguments for Jetson devices
# disable selinux, and set the correct console device
RUN cat <<EOF > /usr/lib/bootc/kargs.d/10-jetson.toml
kargs = ["enforcing=0", "console=ttyTCU0,115200"]
EOF



########### CUSTOMIZATIONS ###########
 RUN dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
     dnf -y install pciutils usbutils python3-pip podman-compose && \
     dnf -y clean all && \
     rm -rf /var/{cache,log} /var/lib/{dnf,rhsm} && \
     systemctl enable podman.service && \
     systemctl enable wpa_supplicant 


### Copy files
COPY files/ /

RUN chmod -R 600 /etc/NetworkManager/system-connections/ && \
    chmod -R 644 /etc/systemd/system-preset/ && \
    chmod +x /usr/local/bin/set-hostname-from-mac.sh && \
    mkdir -p /etc/models

# Pull model from OCI registry
#COPY --from=quay.io/luisarizmendi/modelcar-hardhat:v1 /models/ /models
COPY --from=quay.io/luisarizmendi/modelcar-hardhat:v2 /models/ /etc/models


