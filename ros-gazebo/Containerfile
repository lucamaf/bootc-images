# ---- builder stage ----
FROM ghcr.io/luisarizmendi/bootc-ros:latest as builder

# Additional development tools needed for Gazebo
RUN dnf install -y curl dnf-plugins-core \
'dnf-command(config-manager)' && \
 dnf config-manager --set-enabled codeready-builder-for-rhel-9-$(arch)-rpms && \
 dnf clean all

# Install Gazebo dependencies
RUN dnf install -y \
 protobuf-devel protobuf-compiler \
 qt5-qtbase-devel qt5-qtdeclarative-devel \
 tinyxml2-devel freeimage-devel \
 ogre-devel bullet-devel \
 libcurl-devel jsoncpp-devel \
 libzip-devel libuuid-devel \
 tbb-devel eigen3-devel \
 gts-devel libxml2-devel \
 boost-devel assimp-devel \
 ffmpeg-devel glib2-devel \
 mesa-libGL-devel mesa-libGLU-devel \
 libXi-devel libXmu-devel \
 python3-devel python3-pybind11-devel \
 redhat-lsb-core gnupg2 && \
 dnf clean all

# Setup Gazebo workspace and download sources
RUN mkdir -p /root/gazebo_workspace/src && \
 cd /root/gazebo_workspace/src && \
 curl -O https://raw.githubusercontent.com/gazebo-tooling/gazebodistro/master/collection-ionic.yaml && \
 vcs import < collection-ionic.yaml

# Install Gazebo dependencies using rosdep (rosdep already initialized in base image)
RUN rosdep update && \
 cd /root/gazebo_workspace/src && \
 rosdep install -i --from-paths . -y \
 --skip-keys "gz-cmake3 DART libogre-dev libogre-next-2.3-dev" \
 --os=rhel:9

# Build Gazebo with limited parallelism to reduce RAM usage
ENV CMAKE_BUILD_PARALLEL_LEVEL=1
RUN cd /root/gazebo_workspace && \
 colcon build --cmake-args ' -DBUILD_TESTING=OFF' --merge-install --executor sequential && \
 rm -rf src build log && \
 find . -name ".git" -type d -prune -exec rm -rf {} + && \
 rm -rf /root/.cache/pip

# ---- runtime stage ----
FROM ghcr.io/luisarizmendi/bootc-ros:latest
ENV GAZEBO_ROOT=/opt/gazebo \
 PATH=/opt/gazebo/bin:$PATH \
 LD_LIBRARY_PATH=/opt/gazebo/lib:$LD_LIBRARY_PATH \
 PYTHONPATH=/opt/gazebo/lib/python3.11/site-packages:$PYTHONPATH

# Install additional runtime dependencies for Gazebo
RUN dnf install -y \
 protobuf \
 qt5-qtbase \
 qt5-qtdeclarative \
 tinyxml2 \
 freeimage \
 ogre \
 bullet \
 libcurl \
 jsoncpp \
 libzip \
 libuuid \
 tbb \
 eigen3 \
 gts \
 libxml2 \
 boost \
 assimp \
 ffmpeg-libs \
 glib2 \
 mesa-libGL \
 mesa-libGLU \
 libXi \
 libXmu \
 python3-pybind11 && \
 dnf clean all

# Copy built Gazebo from builder stage (ROS 2 is already in the base image)
COPY --from=builder /root/gazebo_workspace/install /opt/gazebo

# Create setup script for Gazebo (ROS 2 setup is already in base image)
RUN echo '#!/bin/bash' > /etc/profile.d/gazebo_setup.sh && \
 echo 'source /opt/ros2/setup.bash' >> /etc/profile.d/gazebo_setup.sh && \
 echo 'source /opt/gazebo/setup.bash' >> /etc/profile.d/gazebo_setup.sh && \
 chmod +x /etc/profile.d/gazebo_setup.sh

# Create a convenience script to run Gazebo
RUN echo '#!/bin/bash' > /usr/local/bin/gazebo && \
 echo 'source /opt/ros2/setup.bash' >> /usr/local/bin/gazebo && \
 echo 'source /opt/gazebo/setup.bash' >> /usr/local/bin/gazebo && \
 echo 'gz sim "$@"' >> /usr/local/bin/gazebo && \
 chmod +x /usr/local/bin/gazebo